diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/Eml.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/Eml.java
index b50560e..776e45b 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/Eml.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/Eml.java
@@ -8,9 +8,11 @@
 
 package au.org.ecoinformatics.eml.jaxb.eml;
 
+import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAnyElement;
@@ -18,8 +20,11 @@ import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlType;
+
 import org.w3c.dom.Element;
 
+import au.org.ecoinformatics.eml.JaxbPrettyPrinter;
+
 
 /**
  * <p>Java class for anonymous complex type.
@@ -654,4 +659,15 @@ public class Eml {
 
     }
 
+    /*
+     * Added after JAXB generation by automatic application of a patch file
+     */
+    /**
+     * Writes this EML file out to a file
+     * 
+     * @param out	stream to use
+     */
+    public void write(OutputStream out) {
+    	JaxbPrettyPrinter.getEmlJaxbPrettyPrinterInstance().prettyPrint(this, out);
+    }
 }
diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ListType.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ListType.java
index 315a8d1..a676c41 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ListType.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ListType.java
@@ -11,6 +11,7 @@ package au.org.ecoinformatics.eml.jaxb.eml;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import javax.xml.bind.JAXBElement;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -187,6 +188,44 @@ public class ListType {
             return this;
         }
 
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ListType.Listitem withPara(ParagraphType...values) {
+            if (values!= null) {
+            	ObjectFactory factory = new ObjectFactory();
+            	for (ParagraphType currValue : values) {
+            		getParaOrItemizedlistOrOrderedlist().add(factory.createListTypeListitemPara(currValue));
+            	}
+            }
+            return this;
+        }
+
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+		public ListType.Listitem withItemizedlist(ListType...values) {
+			if (values!= null) {
+            	ObjectFactory factory = new ObjectFactory();
+            	for (ListType currValue : values) {
+            		getParaOrItemizedlistOrOrderedlist().add(factory.createListTypeListitemItemizedlist(currValue));
+            	}
+            }
+			return this;
+		}
+
+		/*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+		public ListType.Listitem withOrderedlist(ListType...values) {
+			if (values!= null) {
+            	ObjectFactory factory = new ObjectFactory();
+            	for (ListType currValue : values) {
+            		getParaOrItemizedlistOrOrderedlist().add(factory.createListTypeListitemOrderedlist(currValue));
+            	}
+            }
+			return this;
+		}
     }
 
 }
diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ProtocolType.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ProtocolType.java
index 6b60cd8..7caa542 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ProtocolType.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ProtocolType.java
@@ -12,6 +12,7 @@ import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import javax.xml.bind.JAXBElement;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -1175,6 +1176,29 @@ public class ProtocolType {
             return this;
         }
 
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ProtocolType.AssociatedParty withIndividualName(Person ... values) {
+            super.withIndividualName(values);
+            return this;
+        }
+        
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ProtocolType.AssociatedParty withOrganizationName(I18NNonEmptyStringType ... values) {
+        	super.withOrganizationName(values);
+        	return this;
+        }
+        
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ProtocolType.AssociatedParty withPositionName(I18NNonEmptyStringType ... values) {
+            super.withPositionName(values);
+            return this;
+        }
     }
 
 
diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResearchProjectType.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResearchProjectType.java
index a7427c5..7e8b70f 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResearchProjectType.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResearchProjectType.java
@@ -11,6 +11,7 @@ package au.org.ecoinformatics.eml.jaxb.eml;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import javax.xml.bind.JAXBElement;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -851,6 +852,29 @@ public class ResearchProjectType {
             return this;
         }
 
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ResearchProjectType.Personnel withIndividualName(Person ... values) {
+            super.withIndividualName(values);
+            return this;
+        }
+        
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ResearchProjectType.Personnel withOrganizationName(I18NNonEmptyStringType ... values) {
+        	super.withOrganizationName(values);
+        	return this;
+        }
+        
+        /*
+         * Added after JAXB generation by automatic application of a patch file
+         */
+        public ResearchProjectType.Personnel withPositionName(I18NNonEmptyStringType ... values) {
+            super.withPositionName(values);
+            return this;
+        }
     }
 
 
diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResponsibleParty.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResponsibleParty.java
index 74c2688..3be56cb 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResponsibleParty.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/eml/ResponsibleParty.java
@@ -714,5 +714,43 @@ public class ResponsibleParty {
         }
 
     }
-
+    
+    /*
+     * Added after JAXB generation by automatic application of a patch file
+     */
+    public ResponsibleParty withIndividualName(Person ... values) {
+        if (values!= null) {
+        	ObjectFactory factory = new ObjectFactory();
+            for (Person value: values) {
+				getIndividualNameOrOrganizationNameOrPositionName().add(factory.createResponsiblePartyIndividualName(value));
+            }
+        }
+        return this;
+    }
+    
+    /*
+     * Added after JAXB generation by automatic application of a patch file
+     */
+    public ResponsibleParty withOrganizationName(I18NNonEmptyStringType ... values) {
+        if (values!= null) {
+        	ObjectFactory factory = new ObjectFactory();
+            for (I18NNonEmptyStringType value: values) {
+				getIndividualNameOrOrganizationNameOrPositionName().add(factory.createResponsiblePartyOrganizationName(value));
+            }
+        }
+        return this;
+    }
+    
+    /*
+     * Added after JAXB generation by automatic application of a patch file
+     */
+    public ResponsibleParty withPositionName(I18NNonEmptyStringType ... values) {
+        if (values!= null) {
+        	ObjectFactory factory = new ObjectFactory();
+            for (I18NNonEmptyStringType value: values) {
+				getIndividualNameOrOrganizationNameOrPositionName().add(factory.createResponsiblePartyPositionName(value));
+            }
+        }
+        return this;
+    }
 }
diff --git src/main/jaxb/au/org/ecoinformatics/eml/jaxb/sysmeta/SystemMetadata.java src/main/jaxb/au/org/ecoinformatics/eml/jaxb/sysmeta/SystemMetadata.java
index 19ceb98..d99945c 100644
--- src/main/jaxb/au/org/ecoinformatics/eml/jaxb/sysmeta/SystemMetadata.java
+++ src/main/jaxb/au/org/ecoinformatics/eml/jaxb/sysmeta/SystemMetadata.java
@@ -8,10 +8,12 @@
 
 package au.org.ecoinformatics.eml.jaxb.sysmeta;
 
+import java.io.OutputStream;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlElement;
@@ -19,6 +21,8 @@ import javax.xml.bind.annotation.XmlSchemaType;
 import javax.xml.bind.annotation.XmlType;
 import javax.xml.datatype.XMLGregorianCalendar;
 
+import au.org.ecoinformatics.eml.JaxbPrettyPrinter;
+
 
 /**
  *  System Metadata elements are partitioned into two
@@ -618,4 +622,15 @@ public class SystemMetadata {
         return this;
     }
 
+    /*
+     * Added after JAXB generation by automatic application of a patch file
+     */
+    /**
+     * Writes this EML file out to a file
+     * 
+     * @param out	stream to use
+     */
+	public void write(OutputStream out) {
+		JaxbPrettyPrinter.getSysMetaJaxbPrettyPrinterInstance().prettyPrint(this, out);
+	}
 }
