//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.02.03 at 05:40:36 PM CST 
//


package au.org.ecoinformatics.eml.jaxb.eml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TopologyLevel.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TopologyLevel">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="geometryOnly"/>
 *     &lt;enumeration value="nonPlanarGraph"/>
 *     &lt;enumeration value="planarLineGraph"/>
 *     &lt;enumeration value="fullPlanarGraph"/>
 *     &lt;enumeration value="surfaceGraph"/>
 *     &lt;enumeration value="fullTopology3D"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TopologyLevel", namespace = "eml://ecoinformatics.org/spatialVector-2.1.1")
@XmlEnum
public enum TopologyLevel {

    @XmlEnumValue("geometryOnly")
    GEOMETRY_ONLY("geometryOnly"),
    @XmlEnumValue("nonPlanarGraph")
    NON_PLANAR_GRAPH("nonPlanarGraph"),
    @XmlEnumValue("planarLineGraph")
    PLANAR_LINE_GRAPH("planarLineGraph"),
    @XmlEnumValue("fullPlanarGraph")
    FULL_PLANAR_GRAPH("fullPlanarGraph"),
    @XmlEnumValue("surfaceGraph")
    SURFACE_GRAPH("surfaceGraph"),
    @XmlEnumValue("fullTopology3D")
    FULL_TOPOLOGY_3_D("fullTopology3D");
    private final String value;

    TopologyLevel(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TopologyLevel fromValue(String v) {
        for (TopologyLevel c: TopologyLevel.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
